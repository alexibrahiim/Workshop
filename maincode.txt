package com.example.demo;

import database.DatabaseManager;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.util.Optional;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javafx.scene.control.Separator;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.Node;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.io.File;
import javafx.beans.value.ChangeListener;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import javafx.scene.control.Alert;


public class HelloApplication extends Application {

    @Override
    public void start(Stage primaryStage) {
        ImageView mainImage = new ImageView(new Image("file:///C:/Users/tonyy/OneDrive/Desktop/recipe/main4.png"));
        mainImage.fitWidthProperty().bind(primaryStage.widthProperty());
        mainImage.fitHeightProperty().bind(primaryStage.heightProperty());

        Button getStartedButton = new Button("Let's Get Started!");
        getStartedButton.setStyle("-fx-font-size: 25px; -fx-padding: 20 40; -fx-background-color: #F7D9BC; -fx-text-fill: black; -fx-border-radius: 5; -fx-background-radius: 5;");
        StackPane.setAlignment(getStartedButton, Pos.CENTER);

        StackPane firstPageRoot = new StackPane();
        firstPageRoot.getChildren().addAll(mainImage, getStartedButton);

        Scene firstScene = new Scene(firstPageRoot, 800, 500);

        ImageView secondPageImage = new ImageView(new Image("file:///C:/Users/tonyy/OneDrive/Desktop/recipe/firstsection5.png"));
        secondPageImage.fitWidthProperty().bind(primaryStage.widthProperty());
        secondPageImage.fitHeightProperty().bind(primaryStage.heightProperty());

        Button saltyButton = new Button("Salty");
        Button sugarButton = new Button("Sugar");
        Button cocktailsButton = new Button("Cocktails");
        Button addButton = new Button("Add+");
        Button myRecipeButton = new Button("My Recipe");

        String buttonStyle = "-fx-font-size: 20px; -fx-padding: 10; -fx-background-color: #F7D9BC; -fx-text-fill: black; -fx-border-radius: 7; -fx-background-radius: 5;";
        saltyButton.setStyle(buttonStyle);
        sugarButton.setStyle(buttonStyle);
        cocktailsButton.setStyle(buttonStyle);
        addButton.setStyle(buttonStyle);
        myRecipeButton.setStyle(buttonStyle);

        double buttonWidth = 250;
        saltyButton.setPrefWidth(buttonWidth);
        sugarButton.setPrefWidth(buttonWidth);
        cocktailsButton.setPrefWidth(buttonWidth);
        addButton.setPrefWidth(buttonWidth);
        myRecipeButton.setPrefWidth(buttonWidth);

        VBox buttonLayout = new VBox(20);
        buttonLayout.setAlignment(Pos.CENTER);

        HBox firstRow = new HBox(20);
        firstRow.setAlignment(Pos.CENTER);
        firstRow.getChildren().addAll(saltyButton, sugarButton);

        HBox secondRow = new HBox(20);
        secondRow.setAlignment(Pos.CENTER);
        secondRow.getChildren().addAll(addButton, myRecipeButton);

        HBox thirdRow = new HBox();
        thirdRow.setAlignment(Pos.CENTER);
        thirdRow.getChildren().add(cocktailsButton);

        buttonLayout.getChildren().addAll(firstRow, secondRow, thirdRow);

        StackPane secondPageRoot = new StackPane();
        secondPageRoot.getChildren().addAll(secondPageImage, buttonLayout);

        Scene secondScene = new Scene(secondPageRoot, 850, 500);

        getStartedButton.setOnAction(e -> primaryStage.setScene(secondScene));
        saltyButton.setOnAction(e -> primaryStage.setScene(createSaltyPage(primaryStage, secondScene)));
        sugarButton.setOnAction(e -> primaryStage.setScene(createSugarPage(primaryStage, secondScene)));
        cocktailsButton.setOnAction(e -> primaryStage.setScene(createCocktailsPage(primaryStage, secondScene)));
        addButton.setOnAction(e -> showAddRecipeDialog(primaryStage));
        myRecipeButton.setOnAction(e -> {
            try {
                primaryStage.setScene(createMyRecipesScene(primaryStage, secondScene));
            } catch (Exception ex) {
                showError("Failed to load My Recipe page: " + ex.getMessage());
            }
        });



        primaryStage.setScene(firstScene);
        primaryStage.setTitle("Recipe App");
        primaryStage.show();
    }

    private Scene createRecipeDetailScene(String recipeName, String imagePath, Stage primaryStage, Scene previousScene) {
        VBox root = new VBox(20);
        root.setStyle("-fx-padding: 20;");
        root.setAlignment(Pos.TOP_CENTER);

        ImageView recipeImage = new ImageView(new Image(imagePath));
        recipeImage.setFitWidth(300);
        recipeImage.setPreserveRatio(true);

        Label titleLabel = new Label(recipeName);
        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

        // Fetch recipe details from database
        try {
            // Get recipe_id
            ResultSet recipeRS = DatabaseManager.executeQuery(
                    "SELECT recipe_id FROM Recipe WHERE name LIKE '%" + recipeName + "%'"
            );

            if (recipeRS.next()) {
                int recipeId = recipeRS.getInt("recipe_id");

                // Ingredients Section
                VBox ingredientsSection = createIngredientsSection(recipeId);

                // Instructions Section
                VBox instructionsSection = createInstructionsSection(recipeId);

                // Nutritional Section
                VBox nutritionalSection = createNutritionalSection(recipeId);

                Button backButton = new Button("Back");
                backButton.setStyle("-fx-background-color: #F7D9BC; -fx-text-fill: black;");
                backButton.setOnAction(e -> primaryStage.setScene(previousScene));

                root.getChildren().addAll(
                        backButton,
                        titleLabel,
                        recipeImage,
                        ingredientsSection,
                        instructionsSection,
                        nutritionalSection
                );
            }
        } catch (SQLException e) {
            showError("Error loading recipe details: " + e.getMessage());
        }

        ScrollPane scrollPane = new ScrollPane(root);
        scrollPane.setFitToWidth(true);

        return new Scene(scrollPane, 850, 500);
    }

    private VBox createIngredientsSection(int recipeId) throws SQLException {
        VBox ingredientsSection = new VBox(10);
        Label ingredientsTitle = new Label("Ingredients");
        ingredientsTitle.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        VBox ingredientsList = new VBox(5);
        ResultSet ingredientsRS = DatabaseManager.executeQuery(
                "SELECT name, quantity, unit FROM Ingredient WHERE recipe_id = " + recipeId
        );

        while (ingredientsRS.next()) {
            String ingredient = String.format("â€¢ %s %s %s",
                    ingredientsRS.getDouble("quantity"),
                    ingredientsRS.getString("unit"),
                    ingredientsRS.getString("name")
            );
            ingredientsList.getChildren().add(new Label(ingredient));
        }

        ingredientsSection.getChildren().addAll(ingredientsTitle, ingredientsList);
        return ingredientsSection;
    }

    private VBox createInstructionsSection(int recipeId) throws SQLException {
        VBox instructionsSection = new VBox(10);
        Label instructionsTitle = new Label("Instructions");
        instructionsTitle.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        VBox instructionsList = new VBox(5);
        ResultSet instructionsRS = DatabaseManager.executeQuery(
                "SELECT step_number, instruction_text FROM Instruction WHERE recipe_id = " + recipeId +
                        " ORDER BY step_number"
        );

        while (instructionsRS.next()) {
            String instruction = String.format("%d. %s",
                    instructionsRS.getInt("step_number"),
                    instructionsRS.getString("instruction_text")
            );
            instructionsList.getChildren().add(new Label(instruction));
        }

        instructionsSection.getChildren().addAll(instructionsTitle, instructionsList);
        return instructionsSection;
    }

    private VBox createNutritionalSection(int recipeId) throws SQLException {
        VBox nutritionalSection = new VBox(10);
        Label nutritionalTitle = new Label("Nutritional Facts");
        nutritionalTitle.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        ResultSet nutritionRS = DatabaseManager.executeQuery(
                "SELECT calories, protein, carbs, sodium, fiber, fat FROM NutritionInfo " +
                        "WHERE recipe_id = " + recipeId
        );

        VBox nutritionInfo = new VBox(5);
        if (nutritionRS.next()) {
            String[] nutritionLabels = {
                    String.format("Calories: %d", nutritionRS.getInt("calories")),
                    String.format("Protein: %.1fg", nutritionRS.getDouble("protein")),
                    String.format("Carbohydrates: %.1fg", nutritionRS.getDouble("carbs")),
                    String.format("Sodium: %dmg", nutritionRS.getInt("sodium")),
                    String.format("Fiber: %.1fg", nutritionRS.getDouble("fiber")),
                    String.format("Fat: %.1fg", nutritionRS.getDouble("fat"))
            };

            for (String label : nutritionLabels) {
                nutritionInfo.getChildren().add(new Label(label));
            }
        }

        nutritionalSection.getChildren().addAll(nutritionalTitle, nutritionInfo);
        return nutritionalSection;
    }


    private VBox createRecipeBox(String name, String imagePath, Stage primaryStage, Scene previousScene) {
        ImageView foodImage = new ImageView(new Image(imagePath));
        foodImage.setFitWidth(200);
        foodImage.setPreserveRatio(true);

        Label nameLabel = new Label(name);
        nameLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        Label descriptionLabel = new Label("Press the button to proceed with the recipe!");
        descriptionLabel.setStyle("-fx-font-size: 14px;");

        Button viewRecipeButton = new Button("VIEW RECIPE");
        viewRecipeButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-padding: 10;");
        viewRecipeButton.setOnAction(e ->
                primaryStage.setScene(createRecipeDetailScene(name, imagePath, primaryStage, previousScene))
        );

        VBox recipeBox = new VBox(10, foodImage, nameLabel, descriptionLabel, viewRecipeButton);
        recipeBox.setStyle("-fx-border-color: lightgray; -fx-border-width: 1; -fx-padding: 10;");
        recipeBox.setAlignment(Pos.CENTER);
        return recipeBox;
    }

    private Scene createSaltyPage(Stage primaryStage, Scene secondScene) {
        VBox saltyPageRoot = new VBox(20);
        saltyPageRoot.setAlignment(Pos.TOP_CENTER);
        saltyPageRoot.setStyle("-fx-padding: 10;");

        String[][] recipes = {
                {"Omlette", "file:///C:/Users/tonyy/OneDrive/Desktop/food/1.jpg"},
                {"Avocado Toast", "file:///C:/Users/tonyy/OneDrive/Desktop/food/3.jpg"},
                {"Kibbeh", "file:///C:/Users/tonyy/OneDrive/Desktop/food/5.jpg"},
                {"Burger", "file:///C:/Users/tonyy/OneDrive/Desktop/food/6.jpg"},
                {"Sushi", "file:///C:/Users/tonyy/OneDrive/Desktop/food/7.jpg"},
                {"Tabbouleh", "file:///C:/Users/tonyy/OneDrive/Desktop/food/8.jpg"},
                {"Riz Au Djej", "file:///C:/Users/tonyy/OneDrive/Desktop/food/9.jpg"},
                {"Grape Leaves", "file:///C:/Users/tonyy/OneDrive/Desktop/food/14.jpg"},
                {"Mloukhiye", "file:///C:/Users/tonyy/OneDrive/Desktop/food/15.jpg"},
                {"Zucchini", "file:///C:/Users/tonyy/OneDrive/Desktop/food/16.jpg"},
                {"Cheese Rolls", "file:///C:/Users/tonyy/OneDrive/Desktop/food/19.jpg"},
                {"Spicy Potato", "file:///C:/Users/tonyy/OneDrive/Desktop/food/20.jpg"}
        };

        populateRecipeGrid(saltyPageRoot, recipes, primaryStage, secondScene);

        ScrollPane scrollPane = new ScrollPane(saltyPageRoot);
        scrollPane.setFitToWidth(true);

        VBox rootWithBack = new VBox();
        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(secondScene));
        rootWithBack.getChildren().addAll(backButton, scrollPane);

        return new Scene(rootWithBack, 850, 500);
    }

    private Scene createSugarPage(Stage primaryStage, Scene secondScene) {
        VBox sugarPageRoot = new VBox(20);
        sugarPageRoot.setAlignment(Pos.TOP_CENTER);
        sugarPageRoot.setStyle("-fx-padding: 10;");

        String[][] recipes = {
                {"Smoothie", "file:///C:/Users/tonyy/OneDrive/Desktop/food/2.jpg"},
                {"Greek Yogurt", "file:///C:/Users/tonyy/OneDrive/Desktop/food/4.jpg"},
                {"Baklava", "file:///C:/Users/tonyy/OneDrive/Desktop/food/10.jpg"},
                {"Strawberry Tart", "file:///C:/Users/tonyy/OneDrive/Desktop/food/11.jpg"},
                {"Black Forest Cake", "file:///C:/Users/tonyy/OneDrive/Desktop/food/12.jpg"},
                {"Maamoul", "file:///C:/Users/tonyy/OneDrive/Desktop/food/13.jpg"},
                {"Barazek", "file:///C:/Users/tonyy/OneDrive/Desktop/food/17.jpg"},
                {"Kaak", "file:///C:/Users/tonyy/OneDrive/Desktop/food/18.jpg"},
                {"Donut", "file:///C:/Users/tonyy/OneDrive/Desktop/food/21.jpg"}
        };

        populateRecipeGrid(sugarPageRoot, recipes, primaryStage, secondScene);

        ScrollPane scrollPane = new ScrollPane(sugarPageRoot);
        scrollPane.setFitToWidth(true);

        VBox rootWithBack = new VBox();
        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(secondScene));
        rootWithBack.getChildren().addAll(backButton, scrollPane);

        return new Scene(rootWithBack, 850, 500);
    }


    private Scene createCocktailsPage(Stage primaryStage, Scene secondScene) {
        VBox CocktailsPageRoot = new VBox(20);
        CocktailsPageRoot.setAlignment(Pos.TOP_CENTER);
        CocktailsPageRoot.setStyle("-fx-padding: 10;");

        String[][] recipes = {
                {"Negroni", "file:///C:/Users/tonyy/OneDrive/Desktop/food/22.jpg"},
                {"Paloma", "file:///C:/Users/tonyy/OneDrive/Desktop/food/24.jpg"},
                {"Dirty Martini", "file:///C:/Users/tonyy/OneDrive/Desktop/food/25.jpg"},
                {"whiskey Sour", "file:///C:/Users/tonyy/OneDrive/Desktop/food/26.jpg"},
                {"Strawberry Daiquiri", "file:///C:/Users/tonyy/OneDrive/Desktop/food/27.jpg"},
                {"Old Fashioned", "file:///C:/Users/tonyy/OneDrive/Desktop/food/28.jpg"},
                {"White Russian", "file:///C:/Users/tonyy/OneDrive/Desktop/food/23.jpg"},
                {"Cosmopolitan", "file:///C:/Users/tonyy/OneDrive/Desktop/food/30.jpg"},
                {"Daiquiri", "file:///C:/Users/tonyy/OneDrive/Desktop/food/31.jpg"}
        };

        populateRecipeGrid(CocktailsPageRoot, recipes, primaryStage, secondScene);

        ScrollPane scrollPane = new ScrollPane(CocktailsPageRoot);
        scrollPane.setFitToWidth(true);

        VBox rootWithBack = new VBox();
        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(secondScene));
        rootWithBack.getChildren().addAll(backButton, scrollPane);

        return new Scene(rootWithBack, 850, 500);
    }


    private void showAddRecipeDialog(Stage primaryStage) {
        Dialog<ButtonType> dialog = new Dialog<>();
        dialog.setTitle("Add a Recipe");
        dialog.initOwner(primaryStage);

        VBox dialogContent = new VBox(10);
        dialogContent.setAlignment(Pos.CENTER_LEFT);
        dialogContent.setStyle("-fx-padding: 20;");

        TextField recipeNameField = new TextField();
        recipeNameField.setPromptText("Recipe Name");

        TextArea ingredientsField = new TextArea();
        ingredientsField.setPromptText("Ingredients (one per line)");
        ingredientsField.setPrefRowCount(5);

        TextArea instructionsField = new TextArea();
        instructionsField.setPromptText("Instructions (step by step)");
        instructionsField.setPrefRowCount(5);

        dialogContent.getChildren().addAll(
                new Label("Recipe Name (required):"), recipeNameField,
                new Label("Ingredients (required):"), ingredientsField,
                new Label("Instructions (required):"), instructionsField
        );

        dialog.getDialogPane().setContent(dialogContent);
        ButtonType saveButton = new ButtonType("Save", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButton, ButtonType.CANCEL);

        // Enable save button only when all fields are filled
        Node saveButtonNode = dialog.getDialogPane().lookupButton(saveButton);
        saveButtonNode.setDisable(true);

        // Validation listener
        ChangeListener<String> validationListener = (obs, oldVal, newVal) -> {
            boolean isValid = !recipeNameField.getText().trim().isEmpty() &&
                    !ingredientsField.getText().trim().isEmpty() &&
                    !instructionsField.getText().trim().isEmpty();
            saveButtonNode.setDisable(!isValid);
        };

        recipeNameField.textProperty().addListener(validationListener);
        ingredientsField.textProperty().addListener(validationListener);
        instructionsField.textProperty().addListener(validationListener);

        dialog.showAndWait().ifPresent(response -> {
            if (response == saveButton) {
                String name = recipeNameField.getText().trim();
                String ingredients = ingredientsField.getText().trim();
                String instructions = instructionsField.getText().trim();

                if (!name.isEmpty() && !ingredients.isEmpty() && !instructions.isEmpty()) {
                    saveRecipe(name, ingredients, instructions);
                }
            }
        });
    }

    // Updated validate fields method with correct type for saveButton
    private void validateFields(TextField nameField, TextArea ingredientsField,
                                TextArea instructionsField, Button saveButton) {
        boolean isValid = !nameField.getText().trim().isEmpty() &&
                !ingredientsField.getText().trim().isEmpty() &&
                !instructionsField.getText().trim().isEmpty();
        saveButton.setDisable(!isValid);
    }

    // Update the RECIPE_FILE_PATH declaration at the top of the class to be mutable:
    private static final String RECIPE_FILE_PATH = System.getProperty("user.home")
            + File.separator + "Documents"
            + File.separator + "RecipeApp"
            + File.separator + "recipes.txt";

    private void ensureDirectoryExists() {
        try {
            Path directory = Paths.get(RECIPE_FILE_PATH).getParent();
            if (!Files.exists(directory)) {
                Files.createDirectories(directory);
                System.out.println("Created directory: " + directory);
            }
        } catch (IOException e) {
            System.err.println("Failed to create directory: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void debugPrintFileContent() {
        try {
            Path recipePath = Paths.get(RECIPE_FILE_PATH);
            System.out.println("Recipe file path: " + recipePath.toAbsolutePath());

            if (Files.exists(recipePath)) {
                System.out.println("File exists. Content:");
                List<String> lines = Files.readAllLines(recipePath);
                for (String line : lines) {
                    System.out.println("Line: [" + line + "]");
                }
            } else {
                System.out.println("File does not exist!");
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void saveRecipe(String name, String ingredients, String instructions) {
        try {
            ensureDirectoryExists();
            Path recipePath = Paths.get(RECIPE_FILE_PATH);

            // Clean up the input: replace line breaks with spaces or commas
            name = name.trim().replace("\n", " ");
            ingredients = ingredients.trim().replace("\n", ", ");
            instructions = instructions.trim().replace("\n", " ");

            // Make sure all three components are present
            if (name.isEmpty() || ingredients.isEmpty() || instructions.isEmpty()) {
                throw new IllegalArgumentException("All recipe components must be non-empty");
            }

            // Format recipe data with all three parts on one line
            String recipeData = String.format("%s|%s|%s%n",
                    name.replace("|", "\\|"),
                    ingredients.replace("|", "\\|"),
                    instructions.replace("|", "\\|"));

            System.out.println("Saving recipe to: " + recipePath.toAbsolutePath());
            System.out.println("Recipe data: " + recipeData);

            // Write with proper options
            Files.write(
                    recipePath,
                    recipeData.getBytes(StandardCharsets.UTF_8),
                    StandardOpenOption.CREATE,
                    StandardOpenOption.APPEND
            );

            showInfoAlert("Recipe saved successfully!");

        } catch (Exception ex) {
            String errorMessage = "Failed to save recipe: " + ex.getMessage();
            System.err.println(errorMessage);
            ex.printStackTrace();
            showError(errorMessage);
        }
    }



    // Make sure you also have this helper method for success messages
    private void showInfoAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Success");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }






    private Scene createMyRecipesScene(Stage primaryStage, Scene previousScene) {
        System.out.println("\nAttempting to load recipes...");
        VBox myRecipesRoot = new VBox(20);
        myRecipesRoot.setAlignment(Pos.TOP_CENTER);
        myRecipesRoot.setStyle("-fx-padding: 10;");

        try {
            Path recipePath = Paths.get(RECIPE_FILE_PATH);
            System.out.println("Checking recipe file at: " + recipePath.toAbsolutePath());

            if (!Files.exists(recipePath)) {
                System.out.println("Recipe file does not exist");
                Label noRecipesLabel = new Label("No recipes found. Add your first recipe!");
                noRecipesLabel.setStyle("-fx-font-size: 16px;");
                myRecipesRoot.getChildren().add(noRecipesLabel);
            } else {
                List<String> recipes = Files.readAllLines(recipePath, StandardCharsets.UTF_8);
                System.out.println("Number of lines read from file: " + recipes.size());

                // Filter for valid recipes (must have exactly 3 parts)
                List<String> validRecipes = recipes.stream()
                        .map(String::trim)
                        .filter(line -> !line.isEmpty())
                        .filter(line -> line.split("\\|", -1).length == 3)  // Must have exactly 3 parts
                        .collect(java.util.stream.Collectors.toList());

                System.out.println("Number of valid recipes found: " + validRecipes.size());

                if (validRecipes.isEmpty()) {
                    System.out.println("No valid recipes found in file");
                    Label noRecipesLabel = new Label("No valid recipes found. Add some recipes first!");
                    noRecipesLabel.setStyle("-fx-font-size: 16px;");
                    myRecipesRoot.getChildren().add(noRecipesLabel);
                } else {
                    for (int i = 0; i < validRecipes.size(); i++) {
                        String[] recipeParts = validRecipes.get(i).split("\\|", -1);
                        System.out.println("Processing recipe " + (i + 1) + ": " + String.join(" | ", recipeParts));

                        VBox recipeBox = createRecipeCard(
                                recipeParts[0],
                                recipeParts[1],
                                recipeParts[2],
                                i,
                                primaryStage,
                                previousScene
                        );
                        myRecipesRoot.getChildren().add(recipeBox);
                    }
                }
            }
        } catch (IOException ex) {
            System.err.println("Error in createMyRecipesScene: " + ex.getMessage());
            ex.printStackTrace();

            Label errorLabel = new Label("Unable to load recipes. Please try again later.");
            errorLabel.setStyle("-fx-font-size: 16px; -fx-text-fill: red;");
            myRecipesRoot.getChildren().add(errorLabel);
        }

        ScrollPane scrollPane = new ScrollPane(myRecipesRoot);
        scrollPane.setFitToWidth(true);
        scrollPane.setStyle("-fx-background-color: transparent;");

        VBox rootWithBack = new VBox(10);
        rootWithBack.setStyle("-fx-padding: 10;");

        Button backButton = new Button("Back");
        backButton.setStyle("-fx-background-color: #F7D9BC; -fx-text-fill: black; -fx-font-size: 14px;");
        backButton.setOnAction(e -> primaryStage.setScene(previousScene));

        Label titleLabel = new Label("My Recipes");
        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

        HBox header = new HBox(10);
        header.setAlignment(Pos.CENTER_LEFT);
        header.getChildren().addAll(backButton, titleLabel);

        rootWithBack.getChildren().addAll(header, scrollPane);

        return new Scene(rootWithBack, 850, 500);
    }

    // Helper method to create a recipe card
    private VBox createRecipeCard(String name, String ingredients, String instructions,
                                  int index, Stage primaryStage, Scene previousScene) {
        // If any required field is missing, show placeholder text
        name = (name != null && !name.isEmpty()) ? name : "Untitled Recipe";
        ingredients = (ingredients != null && !ingredients.isEmpty()) ?
                ingredients : "No ingredients listed";
        instructions = (instructions != null && !instructions.isEmpty()) ?
                instructions : "No instructions provided";

        VBox recipeBox = new VBox(10);
        recipeBox.setStyle("-fx-border-color: lightgray; -fx-border-width: 1; " +
                "-fx-padding: 15; -fx-background-color: white; " +
                "-fx-background-radius: 5; -fx-border-radius: 5;");
        recipeBox.setMaxWidth(800);

        // Create header with recipe name and delete button
        HBox headerBox = new HBox(10);
        headerBox.setAlignment(Pos.CENTER_LEFT);

        Label nameLabel = new Label(name);
        nameLabel.setStyle("-fx-font-size: 20px; -fx-font-weight: bold;");

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        Button deleteButton = new Button("Delete");
        deleteButton.setStyle("-fx-background-color: #ff4444; -fx-text-fill: white; " +
                "-fx-background-radius: 3;");
        deleteButton.setOnAction(e -> deleteRecipe(index, primaryStage, previousScene));

        headerBox.getChildren().addAll(nameLabel, spacer, deleteButton);

        // Add sections
        VBox ingredientsBox = new VBox(5);
        Label ingredientsTitle = new Label("Ingredients");
        ingredientsTitle.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");
        Label ingredientsText = new Label(ingredients);
        ingredientsText.setWrapText(true);
        ingredientsBox.getChildren().addAll(ingredientsTitle, ingredientsText);

        VBox instructionsBox = new VBox(5);
        Label instructionsTitle = new Label("Instructions");
        instructionsTitle.setStyle("-fx-font-size: 16px; -fx-font-weight: bold;");
        Label instructionsText = new Label(instructions);
        instructionsText.setWrapText(true);
        instructionsBox.getChildren().addAll(instructionsTitle, instructionsText);

        recipeBox.getChildren().addAll(
                headerBox,
                new Separator(),
                ingredientsBox,
                new Separator(),
                instructionsBox
        );

        return recipeBox;
    }

   

    private void deleteRecipe(int index, Stage primaryStage, Scene previousScene) {
        Alert confirmDialog = new Alert(Alert.AlertType.CONFIRMATION);
        confirmDialog.setTitle("Confirm Delete");
        confirmDialog.setHeaderText("Delete Recipe");
        confirmDialog.setContentText("Are you sure you want to delete this recipe?");

        Optional<ButtonType> result = confirmDialog.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
                List<String> allRecipes = Files.readAllLines(Paths.get(RECIPE_FILE_PATH), StandardCharsets.UTF_8);

                if (index >= 0 && index < allRecipes.size()) {
                    allRecipes.remove(index);

                    // Write the updated list back to the file
                    Files.write(Paths.get(RECIPE_FILE_PATH), allRecipes, StandardCharsets.UTF_8);

                    // Show success message
                    showInfoAlert("Recipe deleted successfully!");

                    // Refresh the My Recipes page
                    primaryStage.setScene(createMyRecipesScene(primaryStage, previousScene));
                }
            } catch (IOException ex) {
                showError("Failed to delete recipe: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }






    private void populateRecipeGrid(VBox root, String[][] recipes, Stage primaryStage, Scene previousScene) {
        HBox currentRow = new HBox(20);
        currentRow.setAlignment(Pos.CENTER);
        int count = 0;

        for (String[] recipe : recipes) {
            VBox recipeBox = createRecipeBox(recipe[0], recipe[1], primaryStage, previousScene);
            currentRow.getChildren().add(recipeBox);
            count++;

            if (count % 3 == 0) {
                root.getChildren().add(currentRow);
                currentRow = new HBox(20);
                currentRow.setAlignment(Pos.CENTER);
            }
        }

        if (!currentRow.getChildren().isEmpty()) {
            root.getChildren().add(currentRow);
        }
    }


    // Keep only this main method
    public static void main(String[] args) {
        launch(args);
    }}


